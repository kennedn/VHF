.program sync
.side_set 1
.wrap_target
pal_start:
    nop side 1                          ; 02us SYNC HIGH
    jmp !y set_even side 0              ; 02us SYNC LOW
    set x 3 side 1 [14]                 ; 30us SYNC HIGH
    jmp short_sync_1 side 0             ; 02us SYNC LOW
set_even:
    nop side 1 [14]                     ; 30us SYNC HIGH
    set x 2 side 0                      ; 02us SYNC LOW
short_sync_1:
    nop side 1 [14]                     ; 30us SYNC HIGH
    jmp x-- short_sync_1 side 0         ; 02us SYNC LOW

    set x 4 side 1 [14]                 ; 30us SYNC HIGH
long_sync:
    jmp !x long_sync_end side 0 [14]    ; 30us SYNC LOW
    jmp x-- long_sync side 1            ; 02us SYNC HIGH
long_sync_end:
    jmp !y set_even_2 side 1            ; 02us SYNC HIGH
    set x 2 side 0                      ; 02us SYNC LOW
    jmp short_sync_2 side 1 [14]        ; 30us SYNC HIGH
set_even_2:
    nop side 0                          ; 02us SYNC LOW
    set x 1 side 1 [14]                 ; 30us SYNC HIGH

short_sync_2:
    nop side 0                          ; 02us SYNC LOW 
    jmp x-- short_sync_2 side 1 [14]    ; 30us SYNC HIGH

    mov x osr side 0                    ; 02us SYNC LOW 
    mov y ! y side 1 [14]               ; 30us SYNC HIGH; Invert y to toggle between odd and even syncs
field_loop:
    nop side 0 [1]                      ; 4us SYNC LOW
    nop side 1 [2]                      ; 6us SYNC HIGH
    irq set 1 side 1 [11]               ; 24us SYNC HIGH; Raise IRQ to initiate data transfer
    jmp !x pal_start side 1 [13]        ; 28us SYNC HIGH; (58us)
    jmp x-- field_loop side 1           ; 02us SYNC HIGH; (60us)
.wrap

.program data
.wrap_target
pal_data_start:
    set pins 0
    wait 1 irq 1
    mov x isr
bit_loop:
    out pins 1
    jmp x-- bit_loop
.wrap
